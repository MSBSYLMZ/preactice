generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Privacy {
  private
  public
  protected
}

enum Status {
  approved
  pending
  rejected
}

model User {
  id                Int         @id @default(autoincrement())
  username          String      @unique
  first_name        String      @db.VarChar(50)
  last_name         String      @db.VarChar(50)
  password          String      @db.VarChar(255)
  email             String?     @db.VarChar(255)
  date_of_birth     DateTime?   @db.Date
  profile_photo     String?     @db.Text
  bio               String?     @db.Text
  questions         Question[]
  puzzle_images     PuzzleImg[]
  sent_messages     Message[]   @relation("SentMessages")
  received_messages Message[]   @relation("ReceivedMessages")
  classrooms        Classroom[]
  gallery           Gallery?
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  user_id           Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user_id       Int
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Question {
  id         Int                @id @default(autoincrement())
  text       String             @db.VarChar(255)
  media      String?
  creator    User?              @relation(fields: [creator_id], references: [id])
  creator_id Int?
  categories QuestionCategory[]
  status     Status?            @default(pending)
  privacy    Privacy            @default(public)
  deleted    Boolean            @default(false)
  created_at DateTime           @default(now())
  updated_at DateTime           @default(now())
  deleted_at DateTime?
  options    QuestionOption[]
}

model QuestionOption {
  id          Int      @id @default(autoincrement())
  text        String   @db.VarChar(500)
  media       String?
  correct     Boolean  @default(false)
  question    Question @relation(fields: [question_id], references: [id])
  question_id Int
}

model PuzzleImg {
  id         Int                 @id @default(autoincrement())
  media      String?
  creator    User?               @relation(fields: [creator_id], references: [id])
  categories PuzzleImgCategory[]
  creator_id Int?
  status     Status?
  privacy    Privacy             @default(public)
  deleted    Boolean             @default(false)
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now())
  deleted_at DateTime?
}

model Message {
  id            Int       @id @default(autoincrement())
  Sender        User      @relation("SentMessages", fields: [sender_id], references: [id])
  Recipient     User      @relation("ReceivedMessages", fields: [recipient_id], references: [id])
  sender_id     Int
  recipient_id  Int
  message       String    @db.Text
  seen          Boolean   @default(false)
  received      Boolean   @default(false)
  received_date DateTime?
  seen_date     DateTime?
}

model Classroom {
  id          Int                 @id @default(autoincrement())
  name        String
  description String
  privacy     Privacy             @default(private)
  creator     User                @relation(fields: [creator_id], references: [id])
  creator_id  Int
  deleted     Boolean             @default(false)
  created_at  DateTime            @default(now())
  updated_at  DateTime            @default(now())
  deleted_at  DateTime?
  categories  ClassroomCategory[]
}

model Gallery {
  id       Int  @id @default(autoincrement())
  owner    User @relation(fields: [owner_id], references: [id])
  owner_id Int  @unique
}

model Category {
  id            Int                 @id @default(autoincrement())
  name          String
  questions     QuestionCategory[]
  classrooms    ClassroomCategory[]
  puzzle_images PuzzleImgCategory[]
}

model QuestionCategory {
  questions   Question @relation(fields: [question_id], references: [id])
  question_id Int
  categories  Category @relation(fields: [category_id], references: [id])
  category_id Int

  @@id([question_id, category_id])
}

model PuzzleImgCategory {
  images        PuzzleImg @relation(fields: [puzzle_img_id], references: [id])
  puzzle_img_id Int
  categories    Category  @relation(fields: [category_id], references: [id])
  category_id   Int

  @@id([puzzle_img_id, category_id])
}

model ClassroomCategory {
  classrooms   Classroom @relation(fields: [classroom_id], references: [id])
  classroom_id Int
  categories   Category  @relation(fields: [category_id], references: [id])
  category_id  Int

  @@id([classroom_id, category_id])
}
